name: SwampApp

on:
  push:
    branches: [ "before_integration" ]
  pull_request:
    branches: [ "before_integration" ]
permissions:
  actions: read # for detecting the Github Actions environment.
  id-token: write # for creating OIDC tokens for signing.
  packages: write # for uploading attestations.
  contents: read
  
jobs:
  build-publish-docker:
    runs-on: ubuntu-latest
    env:
      DOCKER_REPO: docker
      IMAGE_NAME: swampapp
      JF_URL: https://${{ vars.JF_URL }}/
      
    steps:

    - name: Checkout the repository
      uses: actions/checkout@v4
    
    - name: Setup JFrog CLI
      uses: jfrog/setup-jfrog-cli@v3
      id: setup-cli
      env:
       JF_URL: https://${{ vars.JF_URL }}/
       JF_PROJECT: ${{ vars.JF_PROJECT }}
       JF_ACCESS_TOKEN: ${{ secrets.JF_ACCESS_TOKEN }}
     
    - name: Set CLI Config
      run: jf npm-config --global=true --repo-resolve=npm-virtual --repo-deploy=npm-virtual
      
    - name: build webapp
      run: |
         jf npm ci
         npm run build

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Authenticate Docker
      uses: docker/login-action@v3
      with:
         registry: ${{ vars.JF_URL }}
         username: ${{ steps.setup-cli.outputs.oidc-user }}
         password: ${{ steps.setup-cli.outputs.oidc-token }}

    - name: List files
      run: ls -la
      
    - name: List dist contents
      run: ls -la dist
      
    - name: Build the Docker image
      uses: docker/build-push-action@v6
      id: build
      with:
        push: true
        context: .
        platforms: linux/amd64,linux/arm64
        tags: ${{ vars.JF_URL }}/${{ env.DOCKER_REPO }}/${{ env.IMAGE_NAME }}
        provenance: false
        
    - name: docker scan
      run: |  
           jf docker pull ${{ vars.JF_URL }}/${{ env.DOCKER_REPO }}/${{ env.IMAGE_NAME }}
           jf docker scan ${{ vars.JF_URL }}/${{ env.DOCKER_REPO }}/${{ env.IMAGE_NAME }}

    - name: add docker package to build
      run: |  
           echo "${{ vars.JF_URL }}/${{ env.DOCKER_REPO }}/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }}" > metadata.json
           jf rt build-docker-create ${{ env.DOCKER_REPO }} --image-file metadata.json 

    - name: publish build info
      run: |
           jf rt build-collect-env 
           jf rt build-add-git
           jf rt build-publish
           
    - name: build scan
      run: |            
            jf build-scan
